<?php

namespace DoctrineProxies\__CG__\Gesfrota\Model\Domain;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class RequestTrip extends \Gesfrota\Model\Domain\RequestTrip implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);
        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);
        return parent::__set($name, $value);
    }



    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'passengers', 'duration', 'roundTrip', 'from', 'to', 'waypoints', 'service', 'justify', 'schedule', 'requesterUnit', 'resultCenter', 'vehicle', 'driverLicense', 'status', 'openedBy', 'confirmedBy', 'initiatedBy', 'finishedBy', 'canceledBy', 'openedAt', 'confirmedAt', 'initiatedAt', 'finishedAt', 'canceledAt', 'odometerInitial', 'odometerFinal', 'id'];
        }

        return ['__isInitialized__', 'passengers', 'duration', 'roundTrip', 'from', 'to', 'waypoints', 'service', 'justify', 'schedule', 'requesterUnit', 'resultCenter', 'vehicle', 'driverLicense', 'status', 'openedBy', 'confirmedBy', 'initiatedBy', 'finishedBy', 'canceledBy', 'openedAt', 'confirmedAt', 'initiatedAt', 'finishedAt', 'canceledAt', 'odometerInitial', 'odometerFinal', 'id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (RequestTrip $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRoundTrip()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoundTrip', []);

        return parent::getRoundTrip();
    }

    /**
     * {@inheritDoc}
     */
    public function getAmountPassengers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmountPassengers', []);

        return parent::getAmountPassengers();
    }

    /**
     * {@inheritDoc}
     */
    public function getPassengers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassengers', []);

        return parent::getPassengers();
    }

    /**
     * {@inheritDoc}
     */
    public function getDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuration', []);

        return parent::getDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequesterUnit(\Gesfrota\Model\Domain\AdministrativeUnit $unit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequesterUnit', [$unit]);

        return parent::setRequesterUnit($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function setFrom(\Gesfrota\Model\Domain\Place $from)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrom', [$from]);

        return parent::setFrom($from);
    }

    /**
     * {@inheritDoc}
     */
    public function setTo(\Gesfrota\Model\Domain\Place $to)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTo', [$to]);

        return parent::setTo($to);
    }

    /**
     * {@inheritDoc}
     */
    public function setWaypoints(array $waypoints)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWaypoints', [$waypoints]);

        return parent::setWaypoints($waypoints);
    }

    /**
     * {@inheritDoc}
     */
    public function setService($service)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setService', [$service]);

        return parent::setService($service);
    }

    /**
     * {@inheritDoc}
     */
    public function setResultCenter(\Gesfrota\Model\Domain\ResultCenter $unit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultCenter', [$unit]);

        return parent::setResultCenter($unit);
    }

    /**
     * {@inheritDoc}
     */
    public function setDuration(\DateTime $duration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuration', [$duration]);

        return parent::setDuration($duration);
    }

    /**
     * {@inheritDoc}
     */
    public function setPassengers(array $passengers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassengers', [$passengers]);

        return parent::setPassengers($passengers);
    }

    /**
     * {@inheritDoc}
     */
    public function toCancel(\Gesfrota\Model\Domain\User $user, $justifiy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toCancel', [$user, $justifiy]);

        return parent::toCancel($user, $justifiy);
    }

    /**
     * {@inheritDoc}
     */
    public function toDecline(\Gesfrota\Model\Domain\User $user, $justifiy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toDecline', [$user, $justifiy]);

        return parent::toDecline($user, $justifiy);
    }

    /**
     * {@inheritDoc}
     */
    public function toConfirm(\Gesfrota\Model\Domain\User $user, \Gesfrota\Model\Domain\Vehicle $vehicle, \Gesfrota\Model\Domain\User $driver, $roundTrip = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toConfirm', [$user, $vehicle, $driver, $roundTrip]);

        return parent::toConfirm($user, $vehicle, $driver, $roundTrip);
    }

    /**
     * {@inheritDoc}
     */
    public function getItinerary()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItinerary', []);

        return parent::getItinerary();
    }

    /**
     * {@inheritDoc}
     */
    public function getSchedule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSchedule', []);

        return parent::getSchedule();
    }

    /**
     * {@inheritDoc}
     */
    public function getRequesterUnit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequesterUnit', []);

        return parent::getRequesterUnit();
    }

    /**
     * {@inheritDoc}
     */
    public function getVehicle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVehicle', []);

        return parent::getVehicle();
    }

    /**
     * {@inheritDoc}
     */
    public function getDriverLicense()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDriverLicense', []);

        return parent::getDriverLicense();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenedBy', []);

        return parent::getOpenedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfirmedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfirmedBy', []);

        return parent::getConfirmedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getInitiatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInitiatedBy', []);

        return parent::getInitiatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getFinishedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinishedBy', []);

        return parent::getFinishedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getCanceledBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCanceledBy', []);

        return parent::getCanceledBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getOpenedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOpenedAt', []);

        return parent::getOpenedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfirmedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfirmedAt', []);

        return parent::getConfirmedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getInitiatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInitiatedAt', []);

        return parent::getInitiatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getFinishedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinishedAt', []);

        return parent::getFinishedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getCanceledAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCanceledAt', []);

        return parent::getCanceledAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateAt', []);

        return parent::getUpdateAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getHistory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHistory', []);

        return parent::getHistory();
    }

    /**
     * {@inheritDoc}
     */
    public function getFrom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrom', []);

        return parent::getFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function getTo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTo', []);

        return parent::getTo();
    }

    /**
     * {@inheritDoc}
     */
    public function getService()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getService', []);

        return parent::getService();
    }

    /**
     * {@inheritDoc}
     */
    public function getOdometerInitial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOdometerInitial', []);

        return parent::getOdometerInitial();
    }

    /**
     * {@inheritDoc}
     */
    public function getOdometerFinal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOdometerFinal', []);

        return parent::getOdometerFinal();
    }

    /**
     * {@inheritDoc}
     */
    public function getJustify()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJustify', []);

        return parent::getJustify();
    }

    /**
     * {@inheritDoc}
     */
    public function getWaypoints()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWaypoints', []);

        return parent::getWaypoints();
    }

    /**
     * {@inheritDoc}
     */
    public function getResultCenter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultCenter', []);

        return parent::getResultCenter();
    }

    /**
     * {@inheritDoc}
     */
    public function setItinerary(\Gesfrota\Model\Domain\Place $from, \Gesfrota\Model\Domain\Place $to, array $waypoints = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setItinerary', [$from, $to, $waypoints]);

        return parent::setItinerary($from, $to, $waypoints);
    }

    /**
     * {@inheritDoc}
     */
    public function setSchedule(\DateTime $schedule = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSchedule', [$schedule]);

        return parent::setSchedule($schedule);
    }

    /**
     * {@inheritDoc}
     */
    public function toInitiate(\Gesfrota\Model\Domain\User $user, $odometer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toInitiate', [$user, $odometer]);

        return parent::toInitiate($user, $odometer);
    }

    /**
     * {@inheritDoc}
     */
    public function toFinish(\Gesfrota\Model\Domain\User $user, $odometer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toFinish', [$user, $odometer]);

        return parent::toFinish($user, $odometer);
    }

    /**
     * {@inheritDoc}
     */
    public function getStateAllowed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStateAllowed', []);

        return parent::getStateAllowed();
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestType', []);

        return parent::getRequestType();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

}
