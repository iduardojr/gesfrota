<?php

namespace DoctrineProxies\__CG__\Sigmat\Model\AdministrativeUnit;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Agency extends \Sigmat\Model\AdministrativeUnit\Agency implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setParent(\Sigmat\Model\AdministrativeUnit\AdministrativeUnit $parent)
    {
        $this->__load();
        return parent::setParent($parent);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function getAcronym()
    {
        $this->__load();
        return parent::getAcronym();
    }

    public function getContact()
    {
        $this->__load();
        return parent::getContact();
    }

    public function getPhone()
    {
        $this->__load();
        return parent::getPhone();
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function getParent()
    {
        $this->__load();
        return parent::getParent();
    }

    public function getChildren()
    {
        $this->__load();
        return parent::getChildren();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function setAcronym($acronym)
    {
        $this->__load();
        return parent::setAcronym($acronym);
    }

    public function setContact($contact)
    {
        $this->__load();
        return parent::setContact($contact);
    }

    public function setPhone($phone)
    {
        $this->__load();
        return parent::setPhone($phone);
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function delete()
    {
        $this->__load();
        return parent::delete();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function __set($name, $value)
    {
        $this->__load();
        return parent::__set($name, $value);
    }

    public function __get($name)
    {
        $this->__load();
        return parent::__get($name);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'acronym', 'contact', 'phone', 'email', 'status', 'id', 'children', 'parent');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}